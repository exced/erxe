{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/barrast/Desktop/Projects/erxe/app/components/ClientProvider.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { request } from '@octokit/request';\nimport UserMe from '../components/UserMe';\nimport initializeClient from '../graphql/client';\n\nvar ClientProvider = function ClientProvider(_ref) {\n  var code = _ref.code,\n      children = _objectWithoutProperties(_ref, [\"code\"]);\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(null),\n      client = _useState2[0],\n      setClient = _useState2[1];\n\n  useEffect(function () {\n    function init() {\n      var response, client;\n      return _regeneratorRuntime.async(function init$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(request(\"POST \".concat(location.origin, \"/api/github/oauth/token\"), {\n                code: code\n              }));\n\n            case 2:\n              response = _context.sent;\n              client = initializeClient(response.data.token);\n              setClient(client);\n              setLoading(false);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    init();\n  }, []);\n\n  if (loading) {\n    return __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return __jsx(UserMe, {\n    client: client,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default ClientProvider;","map":{"version":3,"sources":["/Users/barrast/Desktop/Projects/erxe/app/components/ClientProvider.tsx"],"names":["useEffect","useState","request","UserMe","initializeClient","ClientProvider","code","children","loading","setLoading","client","setClient","init","location","origin","response","data","token"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;;AAEA,IAAMC,cAA6B,GAAG,SAAhCA,cAAgC,OAA2B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAfC,QAAe;;AAAA,kBACjCN,QAAQ,CAAC,IAAD,CADyB;AAAA,MACxDO,OADwD;AAAA,MAC/CC,UAD+C;;AAAA,mBAEnCR,QAAQ,CAAC,IAAD,CAF2B;AAAA,MAExDS,MAFwD;AAAA,MAEhDC,SAFgD;;AAI/DX,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeY,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEyBV,OAAO,gBACpBW,QAAQ,CAACC,MADW,8BAE5B;AACER,gBAAAA,IAAI,EAAJA;AADF,eAF4B,CAFhC;;AAAA;AAEQS,cAAAA,QAFR;AASQL,cAAAA,MATR,GASiBN,gBAAgB,CAACW,QAAQ,CAACC,IAAT,CAAcC,KAAf,CATjC;AAUEN,cAAAA,SAAS,CAACD,MAAD,CAAT;AACAD,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcAG,IAAAA,IAAI;AACL,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIJ,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,SAAO,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA3BD;;AA6BA,eAAeL,cAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { request } from '@octokit/request';\n\nimport UserMe from '../components/UserMe';\nimport initializeClient from '../graphql/client';\n\nconst ClientProvider: React.FC<any> = ({ code, ...children }) => {\n  const [loading, setLoading] = useState(true);\n  const [client, setClient] = useState(null);\n\n  useEffect(() => {\n    async function init() {\n      // Exchange code for token\n      const response = await request(\n        `POST ${location.origin}/api/github/oauth/token`,\n        {\n          code,\n        }\n      );\n\n      const client = initializeClient(response.data.token);\n      setClient(client);\n      setLoading(false);\n    }\n\n    init();\n  }, []);\n\n  if (loading) {\n    return <h3>Loading...</h3>;\n  }\n\n  return <UserMe client={client} />;\n};\n\nexport default ClientProvider;\n"]},"metadata":{},"sourceType":"module"}